"use strict";
var $__spread = require("traceur/dist/commonjs/runtime/modules/spread.js").default;
var $__createClass = require("traceur/dist/commonjs/runtime/modules/createClass.js").default;
var $__superConstructor = require("traceur/dist/commonjs/runtime/modules/superConstructor.js").default;
var $__superGet = require("traceur/dist/commonjs/runtime/modules/superGet.js").default;
var $___46__46__47_syntax_47_TokenType_46_js__,
    $___46__46__47_syntax_47_trees_47_ParseTrees_46_js__,
    $___46__46__47_util_47_StringSet_46_js__,
    $__ParseTreeFactory_46_js__,
    $__PlaceholderParser_46_js__,
    $__PrependStatements_46_js__;
var $__getTemplateObject = require("traceur/dist/commonjs/runtime/modules/getTemplateObject.js").default;
var $__0 = ($___46__46__47_syntax_47_TokenType_46_js__ = require("../syntax/TokenType.js"), $___46__46__47_syntax_47_TokenType_46_js__ && $___46__46__47_syntax_47_TokenType_46_js__.__esModule && $___46__46__47_syntax_47_TokenType_46_js__ || {default: $___46__46__47_syntax_47_TokenType_46_js__}),
    CONST = $__0.CONST,
    VAR = $__0.VAR;
var $__1 = ($___46__46__47_syntax_47_trees_47_ParseTrees_46_js__ = require("../syntax/trees/ParseTrees.js"), $___46__46__47_syntax_47_trees_47_ParseTrees_46_js__ && $___46__46__47_syntax_47_trees_47_ParseTrees_46_js__.__esModule && $___46__46__47_syntax_47_trees_47_ParseTrees_46_js__ || {default: $___46__46__47_syntax_47_trees_47_ParseTrees_46_js__}),
    Module = $__1.Module,
    Script = $__1.Script;
var StringSet = ($___46__46__47_util_47_StringSet_46_js__ = require("../util/StringSet.js"), $___46__46__47_util_47_StringSet_46_js__ && $___46__46__47_util_47_StringSet_46_js__.__esModule && $___46__46__47_util_47_StringSet_46_js__ || {default: $___46__46__47_util_47_StringSet_46_js__}).StringSet;
var $__3 = ($__ParseTreeFactory_46_js__ = require("./ParseTreeFactory.js"), $__ParseTreeFactory_46_js__ && $__ParseTreeFactory_46_js__.__esModule && $__ParseTreeFactory_46_js__ || {default: $__ParseTreeFactory_46_js__}),
    createBindingIdentifier = $__3.createBindingIdentifier,
    createIdentifierExpression = $__3.createIdentifierExpression,
    createMemberExpression = $__3.createMemberExpression,
    createStringLiteral = $__3.createStringLiteral,
    createVariableStatement = $__3.createVariableStatement;
var parseExpression = ($__PlaceholderParser_46_js__ = require("./PlaceholderParser.js"), $__PlaceholderParser_46_js__ && $__PlaceholderParser_46_js__.__esModule && $__PlaceholderParser_46_js__ || {default: $__PlaceholderParser_46_js__}).parseExpression;
var prependStatements = ($__PrependStatements_46_js__ = require("./PrependStatements.js"), $__PrependStatements_46_js__ && $__PrependStatements_46_js__.__esModule && $__PrependStatements_46_js__ || {default: $__PrependStatements_46_js__}).prependStatements;
function toTempName(name) {
  return ("$__" + name);
}
function getDeclarationType(options) {
  return options.parseOptions.blockBinding && !options.transformOptions.blockBinding ? CONST : VAR;
}
function RequireRuntimeTrait(ParseTreeTransformerClass) {
  return function($__super) {
    function $__6() {
      var $__10;
      for (var args = [],
          $__9 = 0; $__9 < arguments.length; $__9++)
        args[$__9] = arguments[$__9];
      ($__10 = $__superConstructor($__6)).call.apply($__10, $__spread([this], args));
      this.requiredNames_ = new StringSet();
    }
    return ($__createClass)($__6, {
      getRuntimeExpression: function(name) {
        if (this.options.requireRuntime) {
          this.addRequiredName(name);
          return createIdentifierExpression(toTempName(name));
        }
        return createMemberExpression('$traceurRuntime', name);
      },
      get requiredNames() {
        return this.requiredNames_;
      },
      addRequiredName: function(name) {
        this.requiredNames_.add(name);
      },
      transformScript: function(tree) {
        var transformed = $__superGet(this, $__6.prototype, "transformScript").call(this, tree);
        if (tree === transformed) {
          return tree;
        }
        if (!this.options.requireRuntime) {
          return transformed;
        }
        var scriptItemList = this.addRequires_(transformed.scriptItemList);
        return new Script(tree.location, scriptItemList, tree.moduleName);
      },
      transformModule: function(tree) {
        var transformed = $__superGet(this, $__6.prototype, "transformModule").call(this, tree);
        if (tree === transformed) {
          return tree;
        }
        if (!this.options.requireRuntime) {
          return transformed;
        }
        var scriptItemList = this.addRequires_(transformed.scriptItemList);
        return new Module(tree.location, scriptItemList, tree.moduleName);
      },
      addRequires_: function(scriptItemList) {
        var $__8 = this;
        var requires = this.requiredNames_.valuesAsArray().map(function(name) {
          var moduleId = createStringLiteral(("traceur/dist/commonjs/runtime/modules/" + name + ".js"));
          var require = parseExpression($__getTemplateObject(["require(", ").default"]), moduleId);
          var declarationType = getDeclarationType($__8.options);
          return createVariableStatement(declarationType, toTempName(name), require);
        });
        return prependStatements.apply((void 0), $__spread([scriptItemList], requires));
      }
    }, {}, $__super);
  }(ParseTreeTransformerClass);
}
var $__default = RequireRuntimeTrait;
Object.defineProperties(module.exports, {
  default: {get: function() {
      return $__default;
    }},
  __esModule: {value: true}
});
